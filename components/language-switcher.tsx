"use client"

import { useState, useEffect, useMemo } from "react"
import { Button } from "@/components/ui/button"
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu"
import { Globe } from "lucide-react"
import { useI18n } from "@/lib/i18n-context"
import type { Locale } from "@/lib/i18n"
import { motion, AnimatePresence } from "framer-motion"

interface Language {
  code: string
  name: string
  flag: string
}

export function LanguageSwitcher() {
  const { locale, changeLocale } = useI18n()
  const [isHovered, setIsHovered] = useState(false)
  const [isOpen, setIsOpen] = useState(false)
  const [hasBeenSeen, setHasBeenSeen] = useState(false)
  const [isAutoDetected, setIsAutoDetected] = useState(false)

  // –°–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —è–∑—ã–∫–æ–≤ - –º–µ–º–æ–∏–∑–∏—Ä—É–µ–º –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –Ω–µ–Ω—É–∂–Ω—ã—Ö —Ä–µ—Ä–µ–Ω–¥–µ—Ä–æ–≤
  const languages: Language[] = useMemo(
    () => [
      { code: "en", name: "English", flag: "üá∫üá∏" },
      { code: "es", name: "Espa√±ol", flag: "üá™üá∏" },
      { code: "fr", name: "Fran√ßais", flag: "üá´üá∑" },
      { code: "de", name: "Deutsch", flag: "üá©üá™" },
      { code: "it", name: "Italiano", flag: "üáÆüáπ" },
      { code: "zh", name: "‰∏≠Êñá", flag: "üá®üá≥" },
      { code: "hi", name: "‡§π‡§ø‡§®‡•ç‡§¶‡•Ä", flag: "üáÆüá≥" },
      { code: "uk", name: "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", flag: "üá∫üá¶" },
      { code: "ar", name: "ÿßŸÑÿπÿ±ÿ®Ÿäÿ©", flag: "üá∏üá¶" },
      { code: "ru", name: "–†—É—Å—Å–∫–∏–π", flag: "üá∑üá∫" },
    ],
    [],
  )

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –ø—É–ª—å—Å–∞—Ü–∏–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
    const hasSeenLanguageSwitcher = localStorage.getItem("hasSeenLanguageSwitcher")

    if (hasSeenLanguageSwitcher) {
      setHasBeenSeen(true)
    } else {
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç –ø—É–ª—å—Å–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
      const timer = setTimeout(() => {
        setHasBeenSeen(true)
        localStorage.setItem("hasSeenLanguageSwitcher", "true")
      }, 5000)

      return () => clearTimeout(timer)
    }
  }, [])

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —è–∑—ã–∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
  useEffect(() => {
    // –ï—Å–ª–∏ –≤ localStorage –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞, –∑–Ω–∞—á–∏—Ç —è–∑—ã–∫ –±—ã–ª –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    if (typeof window !== "undefined") {
      const savedLocale = localStorage.getItem("preferred-locale")
      if (!savedLocale) {
        setIsAutoDetected(true)

        // –ß–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ —Å–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const timer = setTimeout(() => {
          setIsAutoDetected(false)
        }, 5000)

        return () => clearTimeout(timer)
      }
    }
  }, [])

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–º–µ–Ω—ã —è–∑—ã–∫–∞
  const handleLanguageChange = (langCode: string) => {
    changeLocale(langCode as Locale)
    setIsOpen(false)
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –º—ã—à–∏
  const handleMouseEnter = () => setIsHovered(true)
  const handleMouseLeave = () => setIsHovered(false)
  const handleOpenChange = (open: boolean) => setIsOpen(open)

  // –¢–µ–∫—É—â–∏–π —è–∑—ã–∫
  const currentLanguage = languages.find((lang) => lang.code === locale) || languages[0]

  // –ê–Ω–∏–º–∞—Ü–∏–∏
  const notificationVariants = {
    hidden: { opacity: 0, y: -10 },
    visible: { opacity: 1, y: 0 },
    exit: { opacity: 0, y: -10 },
  }

  const menuItemVariants = {
    hidden: { opacity: 0, x: -10 },
    visible: { opacity: 1, x: 0 },
    hover: { x: 5, transition: { duration: 0.2 } },
  }

  return (
    <div className="relative">
      <AnimatePresence>
        {isAutoDetected && (
          <motion.div
            className="absolute -top-10 left-0 right-0 bg-gradient-to-r from-green-500/80 to-emerald-500/80 text-white text-xs p-1.5 rounded-md text-center shadow-lg"
            initial="hidden"
            animate="visible"
            exit="exit"
            variants={notificationVariants}
          >
            {locale === "ru"
              ? "–Ø–∑—ã–∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
              : locale === "es"
                ? "Idioma detectado autom√°ticamente"
                : locale === "fr"
                  ? "Langue d√©tect√©e automatiquement"
                  : locale === "de"
                    ? "Sprache automatisch erkannt"
                    : locale === "it"
                      ? "Lingua rilevata automaticamente"
                      : locale === "zh"
                        ? "ËØ≠Ë®ÄÂ∑≤Ëá™Âä®Ê£ÄÊµã"
                        : locale === "uk"
                          ? "–ú–æ–≤–∞ –≤–∏–∑–Ω–∞—á–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ"
                          : locale === "ar"
                            ? "ÿ™ŸÖ ÿßŸÑŸÉÿ¥ŸÅ ÿπŸÜ ÿßŸÑŸÑÿ∫ÿ© ÿ™ŸÑŸÇÿßÿ¶ŸäŸãÿß"
                            : locale === "hi"
                              ? "‡§≠‡§æ‡§∑‡§æ ‡§∏‡•ç‡§µ‡§ö‡§æ‡§≤‡§ø‡§§ ‡§∞‡•Ç‡§™ ‡§∏‡•á ‡§™‡§π‡§ö‡§æ‡§®‡•Ä ‡§ó‡§à"
                              : "Language detected automatically"}
          </motion.div>
        )}
      </AnimatePresence>

      <DropdownMenu open={isOpen} onOpenChange={handleOpenChange}>
        <DropdownMenuTrigger asChild>
          <Button
            variant="ghost"
            size="sm"
            className={`
              text-white/80 hover:text-white hover:bg-white/10 
              transition-all duration-300 relative
              ${!hasBeenSeen ? "animate-pulse" : ""}
              ${isHovered || isOpen ? "bg-white/10" : ""}
            `}
            onMouseEnter={handleMouseEnter}
            onMouseLeave={handleMouseLeave}
            aria-label={`–°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫. –¢–µ–∫—É—â–∏–π —è–∑—ã–∫: ${currentLanguage.name}`}
          >
            <Globe className="w-4 h-4 mr-1" aria-hidden="true" />
            <span className="text-sm">{currentLanguage.flag}</span>
            <span aria-hidden="true">{currentLanguage.code.toUpperCase()}</span>

            {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ */}
            {!hasBeenSeen && (
              <span className="absolute -top-1 -right-1 flex h-2 w-2" aria-hidden="true">
                <span className="animate-ping absolute inline-flex h-full w-full rounded-full bg-orange-400 opacity-75"></span>
                <span className="relative inline-flex rounded-full h-2 w-2 bg-orange-500"></span>
              </span>
            )}
          </Button>
        </DropdownMenuTrigger>

        <DropdownMenuContent
          align="end"
          className="bg-gradient-to-b from-purple-900/95 to-indigo-900/95 backdrop-blur-md border border-white/10 text-white p-1 min-w-[180px] shadow-xl"
        >
          <AnimatePresence>
            {languages.map((lang) => (
              <motion.div
                key={lang.code}
                initial="hidden"
                animate="visible"
                whileHover="hover"
                variants={menuItemVariants}
              >
                <DropdownMenuItem
                  className={`
                    flex items-center gap-2 px-3 py-2.5 text-sm cursor-pointer rounded-md
                    ${locale === lang.code ? "bg-white/10 text-pink-400 font-medium" : "hover:bg-white/5 hover:text-pink-400"}
                    transition-colors duration-150
                  `}
                  onClick={() => handleLanguageChange(lang.code)}
                >
                  <span className="text-base" aria-hidden="true">
                    {lang.flag}
                  </span>
                  <span>{lang.name}</span>
                  {locale === lang.code && (
                    <span className="ml-auto text-xs text-green-400" aria-hidden="true">
                      ‚úì
                    </span>
                  )}
                </DropdownMenuItem>
              </motion.div>
            ))}
          </AnimatePresence>
        </DropdownMenuContent>
      </DropdownMenu>
    </div>
  )
}
